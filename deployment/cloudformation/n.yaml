AWSTemplateFormatVersion: '2010-09-09'
Description: A basic network stack with VPC and ECS
Resources:
##################### Network ##########################
  test_VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'

  test_PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'test_VPC'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'test_VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'test_VPC'

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'test_PublicSubnet'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

############### ECS Cluster ###################
  test_ECSCluster:
    Type: AWS::ECS::Cluster

  test_ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS container
      VpcId: !Ref 'test_VPC'

  ECSSecurityGroupIngressFromAnywhere:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows inbound traffic from Anywhere
      GroupId: !Ref 'test_ECSSecurityGroup'
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

###########Securit IAM Policies and Roles ####################
  test_ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazon.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:Describe'
                  - 'ec2:DetachNetworkInterface'
                Resource: '*'

  test_ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazon.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
         - PolicyName: AmazonECSTaskExecutionRolePolicy
           PolicyDocument:
             Statement:
               - Effect: Allow
                 Action:
                   # Allow the ECS Task to download images from ECR
                   - 'ecr:GetAuthorizationToken'
                   - 'ecr:BatchCheckLayerAvailability'
                   - 'ecr:GetDownloadUrlForLayer'
                   - 'ecr:BatchGetImage'

                   # Allow the ECS tasks to upload logs to CloudWatch
                   - 'logs:CreateLogStream'
                   - 'logs:PutLogEvents'
                 Resource: '*'



Outputs:
  ClusterName:
    Description: THe name of the ECS cluster
    Value: !Ref 'test_ECSCluster'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'ClusterName']]
  ECSRole:
    Description: The Arn of the ECS role
    Value: !GetAtt 'test_ECSRole.Arn'
    Export:
      Name: !Join [":", [!Ref 'AWS::StackName', 'ECSRole']]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'test_ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'ECSTaskExecutionRole']]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'test_VPC'
    Export:
      Name: !Join [':',[!Ref 'AWS::StackName', 'VPCId']]
  PublicSubnet:
    Description: Public subnet one
    Value: !Ref 'test_PublicSubnet'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'PublicSubnet']]
  ECSSecurityGroup:
    Description: A Security group used to allow ECS containers to receive traffic
    Value: !Ref 'test_ECSSecurityGroup'
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName','ECSSecurityGroup']]

